import React, { useState, useRef, useEffect } from "react";
import axios from "axios";
import {
  FaRobot,
  FaUserAlt,
  FaPaperPlane,
  FaMicrophone,
  FaChevronDown,
  FaChevronUp,
  FaTimes,
  FaQuestionCircle,
} from "react-icons/fa";
import "../../style/ChatBot.scss";

const quickQuestions = [
  { text: "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?", emoji: "üõí" },
  { text: "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã?", emoji: "üí≥" },
  { text: "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞?", emoji: "üöö" },
  { text: "–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä?", emoji: "üîÑ" },
  { text: "–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã?", emoji: "‚è∞" },
  { text: "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω?", emoji: "üìç" },
  { text: "–ö–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∞—Ç—Ä—É–±–∫–∏?", emoji: "üîß" },
  { text: "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", emoji: "üìû" },
];

const ChatWidgetBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      sender: "bot",
      text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è —Å–∫—É—Ç–µ—Ä–æ–≤. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
    },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isQuickActionsVisible, setIsQuickActionsVisible] = useState(true);

  const chatContainerRef = useRef(null);
  const recognitionRef = useRef(null);

  useEffect(() => {
    if ("webkitSpeechRecognition" in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.lang = "ru-RU";
      recognition.interimResults = false;

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        setIsRecording(false);
      };

      recognition.onerror = () => setIsRecording(false);
      recognition.onend = () => setIsRecording(false);

      recognitionRef.current = recognition;
    }
  }, []);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTo({
        top: chatContainerRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  }, [messages]);

  const toggleChat = () => setIsOpen((prev) => !prev);

  const sendMessage = async (text) => {
    if (!text.trim()) return;

    setMessages((prev) => [...prev, { sender: "user", text }]);
    setInput("");
    setIsLoading(true);

    try {
      const { data } = await axios.post("/api/chat", { message: text });
      const reply = data.reply || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å.";
      setMessages((prev) => [...prev, { sender: "bot", text: reply }]);
    } catch {
      setMessages((prev) => [
        ...prev,
        {
          sender: "bot",
          text: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleRecording = () => {
    if (!recognitionRef.current) {
      alert("–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return;
    }

    isRecording ? recognitionRef.current.stop() : recognitionRef.current.start();
    setIsRecording(!isRecording);
  };

  const handleSend = () => sendMessage(input);

  const toggleQuickActions = () => setIsQuickActionsVisible((prev) => !prev);

  const renderMessages = () =>
    messages.map((msg, idx) => (
      <div key={idx} className={`message ${msg.sender}`}>
        <div className="avatar">
          {msg.sender === "user" ? <FaUserAlt /> : <FaRobot />}
        </div>
        <div className="message-content">
          <div className="message-text">{msg.text}</div>
        </div>
      </div>
    ));

  const renderQuickActions = () => (
    <div className="quick-actions-scroll">
      {quickQuestions.map((item, i) => (
        <button
          key={i}
          onClick={() => sendMessage(item.text)}
          className="quick-btn"
        >
          <span className="emoji">{item.emoji}</span>
          <span className="quick-text">{item.text}</span>
        </button>
      ))}
    </div>
  );

  return (
    <div className="chatbot-wrapper">
      <button
        onClick={toggleChat}
        className={`chatbot-toggle ${isOpen ? "active" : ""}`}
        aria-label={isOpen ? "–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç" : "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"}
      >
        {isOpen ? <FaTimes /> : (
          <div className="chat-icon-wrapper">
            <FaRobot className="main-icon" />
            <div className="notification-dot"></div>
          </div>
        )}
      </button>

      {isOpen && (
        <div className="chatbot-modal-overlay" onClick={toggleChat}>
          <div className="chatbot-modal" onClick={(e) => e.stopPropagation()}>
            <div className="chatbot-header">
              <div className="header-content">
                <div className="avatar">
                  <FaRobot />
                </div>
                <div className="header-text">
                  <h3>–°–∫—É—Ç–µ—Ä-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
                  <span className="status online">Online</span>
                </div>
                <button
                  className="close-btn"
                  onClick={toggleChat}
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
                >
                  <FaTimes />
                </button>
              </div>
            </div>

            <div className="chatbot-messages" ref={chatContainerRef}>
              {renderMessages()}
              {isLoading && (
                <div className="message bot">
                  <div className="avatar">
                    <FaRobot />
                  </div>
                  <div className="message-content">
                    <div className="typing-indicator">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="quick-section">
              <div
                className="quick-actions-toggle"
                onClick={toggleQuickActions}
                role="button"
                tabIndex={0}
                aria-expanded={isQuickActionsVisible}
              >
                –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                {isQuickActionsVisible ? <FaChevronUp /> : <FaChevronDown />}
              </div>
              {isQuickActionsVisible && renderQuickActions()}
            </div>

            <div className="chatbot-input">
              <button
                onClick={toggleRecording}
                className={`mic-btn ${isRecording ? "recording" : ""}`}
                aria-label="–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"
              >
                <FaMicrophone />
              </button>
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && handleSend()}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                aria-label="–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
              />
              <button
                onClick={handleSend}
                className="send-btn"
                aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                disabled={!input.trim()}
              >
                <FaPaperPlane className="send-icon" />
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatWidgetBot;
